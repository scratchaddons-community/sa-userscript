export default async function({template:t}){const s=Vue.extend({props:["addon","tableChild","setting","addon-settings"],template:t,data(){return{rowDropdownOpen:0,noResetDropdown:["table","boolean","select"].includes(this.setting.type)}},ready(){this.$root.$on("close-reset-dropdowns",(t=>{this.rowDropdownOpen&&this!==t&&(this.rowDropdownOpen=0)}))},computed:{show(){return this.setting.if?this.setting.if.addonEnabled&&(Array.isArray(this.setting.if.addonEnabled)?this.setting.if.addonEnabled:[this.setting.if.addonEnabled]).some((t=>1==this.$root.manifestsById[t]._enabled))||this.setting.if.settings&&1==Object.keys(this.setting.if.settings).some((t=>(Array.isArray(this.setting.if.settings[t])?this.setting.if.settings[t]:[this.setting.if.settings[t]]).some((s=>this.addonSettings[t]===s||this.$parent?.addonSettings?.[t]===s))))?1:0:1},showResetDropdown(){return!this.tableChild&&this.addon.presets&&this.addon.presets.some((t=>({}.hasOwnProperty.call(t.values,this.setting.id)&&"color"===this.setting.type?t.values[this.setting.id].toLowerCase()!==this.setting.default.toLowerCase():t.values[this.setting.id]!==this.setting.default)))},isNewOption(){if(!this.addon.latestUpdate)return 0
const[t,s,i]=window.vue.version.split("."),[e,h,n]=this.addon.latestUpdate.version.split(".")
return t!==e||s!==h?0:this.addon.latestUpdate.newSettings&&this.addon.latestUpdate.newSettings.includes(this.setting.id)?1:0}},methods:{settingsName(t){return this.setting.name.replace(/([\\]*)(@|#)([a-zA-Z0-9.\-\/_]*)/g,(s=>"\\"===s[0]?s.slice(1):"@"===s[0]?`<img class="inline-icon" src="../../images/icons/${s.split("@")[1]}"/>`:"#"===s[0]?`<img class="inline-icon" src="../../addons/${t._addonId}/${s.split("#")[1]}"/>`:void 0))},checkValidity(){let t=this.$event.target
this.addonSettings[this.setting.id]=t.validity.valid?t.value:this.setting.default},keySettingKeyDown(t){t.preventDefault(),t.target.value=t.ctrlKey?"Ctrl"+(t.shiftKey?" + Shift":"")+("Control"===t.key||"Shift"===t.key?"":(t.ctrlKey?" + ":"")+(t.key.toUpperCase()===t.key?t.code.includes("Digit")?t.code.substring(5,t.code.length):t.key:t.key.toUpperCase())):""},keySettingKeyUp(t){"Ctrl"===t.target.value&&(t.target.value=""),this.updateOption(t.target.value)},getTableSetting(t){return this.setting.row.find((s=>s.id===t))},deleteTableRow(t){this.addonSettings[this.setting.id].splice(t,1),this.updateSettings()},addTableRow(t={}){const s=Object.assign({},this.setting.row.reduce(((t,s)=>(t[s.id]=s.default,t)),{}),t)
this.addonSettings[this.setting.id].push(s),this.updateSettings(),this.rowDropdownOpen&&this.toggleRowDropdown()},toggleRowDropdown(){this.rowDropdownOpen=!this.rowDropdownOpen,this.$root.closePickers({isTrusted:1},null,{callCloseDropdowns:0}),this.$root.closeResetDropdowns({isTrusted:1},this)},msg(...t){return this.$root.msg(...t)},updateSettings(...t){t[0]||(t[0]=this.addon),this.$root.updateSettings(...t)},updateOption(t){this.addonSettings[this.setting.id]=t,this.updateSettings()}},events:{closePickers(...t){return this.$root.closePickers(...t)},closeResetDropdowns(...t){return this.$root.closeResetDropdowns(...t)}},directives:{sortable(){const t=new window.Sortable(this.el,{handle:".handle",animation:300,onUpdate:t=>{let s=this.vm.addonSettings[this.vm.setting.id]
s.splice(t.newIndex,0,s.splice(t.oldIndex,1)[0]),this.vm.updateSettings()},disabled:!this.vm.addon._enabled})
this.vm.$parent.$on("toggle-addon-request",(s=>{t.option("disabled",!s)}))}}})
Vue.component("addon-setting",s)}