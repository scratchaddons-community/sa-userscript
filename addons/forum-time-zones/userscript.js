export default async function({addon:e}){const t=[],a=e.auth.scratchLang,n=Intl.DateTimeFormat().resolvedOptions().timeZone,o=new Date((new Date).toLocaleString("en-US",{timeZone:n})),c=new Intl.RelativeTimeFormat(a,{localeMatcher:"best fit",numeric:"auto",style:"long"}),s=e=>{const t=new Date(e),s=new Date(t.toLocaleString("en-US",{timeZone:n})),r=Math.min(Math.floor(s/864e5)-Math.floor(o/864e5),0),l=s.toLocaleTimeString("en-GB")
switch(r){case 0:case-1:return`${i=c.format(r,"day"),i[0].toUpperCase()+i.slice(1)} ${l}`
default:return`${s.toLocaleDateString(a,{dateStyle:"long"})} ${l}`}var i},r=new URLSearchParams(location.search).get("page")
e.self.addEventListener("disabled",(()=>{for(const e of t){const{el:t,og:a}=e
t.innerText=a}})),e.self.addEventListener("reenabled",(()=>{for(const e of t){const{el:t,fetched:a}=e
t.innerText=s(a)}})),fetch(`https://scratch.mit.edu/discuss/m/topic/${location.pathname.split("/")[3]}?page=${r||1}`,{credentials:"omit"}).catch((()=>{throw"fetch error"})).then((e=>e.text())).then((async a=>{await e.tab.waitForElement(".blockpost"),[...(new DOMParser).parseFromString(a,"text/html").querySelectorAll("article")].forEach((a=>{const n=a.querySelector("time").getAttribute("datetime")+".000Z",o=document.querySelector(`#p${a.id.substring(5)} > .box > .box-head > a`)
t.push({el:o,fetched:n,og:o.innerText}),e.self.disabled||(o.innerText=s(n))}))}))}