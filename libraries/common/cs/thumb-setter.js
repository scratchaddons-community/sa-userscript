export default class t{constructor(t,i){this._input=null,this._beforeUpload=i,this.projectId=t||location.pathname.replace(/\D/g,""),this.onFinished=t=>t}_initPromise(){this._callback=null,this._errorCallback=null,this.finished=new Promise(((t,i)=>{this._callback=t,this._errorCallback=i}))}addFileInput(){const t=this._input=document.createElement("input")
t.type="file",t.accept="image/*",t.classList.add("sa-animated-thumb-input"),t.addEventListener("change",this.onInput.bind(this),{once:1}),t.addEventListener("cancel",this.onCancel.bind(this),{once:1}),document.body.appendChild(t)}showInput(){this._input&&this._input.click()}onInput(){let t=Promise.resolve()
const i=this._input?.files?.[0]
i&&(this._beforeUpload&&(t=this._beforeUpload(i).catch((t=>{if("Aborted"!==t)throw t}))),t.then((()=>this.upload(i)))),t.finally((()=>this.removeFileInput()))}onCancel(){this.removeFileInput(),this._initPromise(),this.onFinished(this.finished),this._callback(1)}removeFileInput(){this._input&&(this._input.remove(),this._input=null)}getCSRFToken(){return/scratchcsrftoken=([\w]+)/.exec(document.cookie)[1]}async upload(t){this._initPromise(),this.onFinished(this.finished)
try{const i=await fetch(`https://scratch.mit.edu/internalapi/project/thumbnail/${this.projectId}/set/`,{method:"POST",body:t,credentials:"include",headers:{"X-CSRFToken":this.getCSRFToken()}})
if(!i.ok){const t=new Error(`Server responded with: ${i.status}`)
throw t.status=i.status,t}}catch(t){return console.error("Error while uploading a thumbnail:",t.message),void this._errorCallback(t.status)}this._callback()}}